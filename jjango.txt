Задача 1: Установка Django
Для начала вам нужно установить Django в ваше окружение.
 Выполните следующую команду:

pip install django

Задача 2: Создание нового проекта
После установки Django, создадим новый проект.
Django сам создаст структуру папок и файлов для вас. Выполните команду:

django-admin startproject myproject

Что происходит:
django-admin startproject создаёт базовую структуру проекта,
 включая главный файл конфигурации settings.py и другие служебные файлы.
Папка проекта будет содержать поддиректорию с
именем вашего проекта (например, myproject/), в которой будут
находиться все настройки проекта.

Задача 3: Запуск сервера разработки
Теперь, когда у вас есть проект, давайте запустим встроенный сервер разработки,
чтобы проверить, всё ли работает. Для этого выполните команду:

python manage.py runserver

Миграции — это способ Django управлять изменениями в базе данных.
Они создают или изменяют таблицы базы данных, основываясь на ваших
моделях. В вашем случае, есть стандартные приложения Django,
такие как auth (система аутентификации пользователей) и admin
(админ-панель), для которых нужно создать соответствующие таблицы
в базе данных.

Задача: Применить миграции
Остановите сервер разработки (нажмите CTRL+C в консоли, где запущен сервер).
Выполните команду, чтобы применить все необходимые миграции:

python manage.py migrate

Эта команда создаст все таблицы в базе данных, которые требуются
для работы стандартных приложений Django, таких как система
аутентификации, админ-панель и работа с сессиями.

Этап 2: Создание первого приложения
Django разбивает проект на "приложения" (apps).
Каждое приложение отвечает за определённую функциональность,
и одно приложение можно использовать в нескольких проектах.
Мы создадим приложение для работы с котами
(как в вашем тестовом задании).

Задача 1: Создание приложения
Выполните команду для создания нового приложения. Назовём его, например, cats:

python manage.py startapp cats

Эта команда создаст структуру файлов для нового приложения cats, и оно станет отдельным модулем в вашем проекте.

Что произошло?
Django создал новую папку cats, внутри которой находятся такие файлы, как:

models.py: Здесь мы будем создавать модели базы данных (например, модель кота).
views.py: Здесь будут обработчики запросов от пользователей.
admin.py: В этом файле можно зарегистрировать модели для отображения в админ-панели.
migrations/: Папка для файлов миграций, которые будут создаваться автоматически на
основе моделей.

Задача 2: Подключить приложение к проекту
Чтобы приложение заработало, нужно добавить его в настройки проекта.
 Откройте файл myproject/settings.py и добавьте cats в список установленных
 приложений INSTALLED_APPS:

 INSTALLED_APPS = [
    # Другие стандартные приложения Django
    'cats',  # Добавляем наше новое приложение
]

Задача 3: Проверить, что приложение работает
После добавления приложения перезапустите сервер:

python manage.py runserver

Этап 3: Создание модели для котов
Модель в Django описывает структуру данных, которые
будут храниться в базе данных. В нашем случае это модель для котов,
где каждый кот будет иметь поля, такие как имя, возраст, порода и т.д.

Задача 1: Создать модель Cat
Откройте файл cats/models.py.
Добавьте следующую модель:

from django.db import models

class Cat(models.Model):
    name = models.CharField(max_length=100)  # Имя кота
    age = models.IntegerField()              # Возраст кота
    breed = models.CharField(max_length=100) # Порода
    fur_length = models.CharField(max_length=50)  # Длина шерсти

    def __str__(self):
        return self.name  # Это определяет, как объект кота будет отображаться (например, в админке)

Что это означает:
models.Model — это базовый класс для всех моделей в Django.
CharField — это поле для строк (например, имя, порода, длина шерсти).
IntegerField — это поле для чисел (например, возраст).
__str__ метод — позволяет указать, как объект будет представлен
(например, в панели администратора или при выводе в консоли).

Задача 2: Применить миграции:
Теперь, когда мы создали модель, нужно применить изменения в базе данных.

Создайте миграции (это шаг, который Django использует для подготовки
 изменений в базе данных):

 python manage.py makemigrations

